<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="camera_8cpp" kind="file" language="C++">
    <compoundname>camera.cpp</compoundname>
    <includes refid="camera_8h" local="yes">camera.h</includes>
    <includes refid="ray_8h" local="yes">ray.h</includes>
    <incdepgraph>
      <node id="170">
        <label>camera.h</label>
        <link refid="camera_8h_source"/>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
      </node>
      <node id="169">
        <label>/mnt/c/Users/Sunil/Documents/architectural_raytracer/src/camera.cpp</label>
        <link refid="camera_8cpp"/>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
      </node>
      <node id="173">
        <label>math.h</label>
      </node>
      <node id="171">
        <label>ray.h</label>
        <link refid="ray_8h_source"/>
        <childnode refid="172" relation="include">
        </childnode>
      </node>
      <node id="172">
        <label>glm/glm.hpp</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;camera.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ray.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal">camera::camera(vec3<sp/>lookfrom,vec3<sp/>lookat,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fovvert,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>aspect_ratio){</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec3<sp/>u,v,w,vup;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vup<sp/>=<sp/>vec3(0,1,0);</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>origin<sp/>=<sp/>lookfrom;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vfov<sp/>=<sp/>fovvert;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aspect<sp/>=<sp/>aspect_ratio;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>normalize(lookfrom<sp/>-<sp/>lookat);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u<sp/>=<sp/>normalize(cross(vup,w));</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>-1.0f*normalize(cross(u,w));</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>vfov<sp/>*<sp/>M_PI<sp/>/<sp/>180;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>half_height<sp/>=<sp/>tan(theta/2);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>half_width<sp/>=<sp/>half_height<sp/>*<sp/>aspect;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>height<sp/>=<sp/>v*half_height*2.0f;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>=<sp/>u*half_width*2.0f;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lower_left<sp/>=<sp/>origin<sp/>-<sp/>half_height*v<sp/>-<sp/>half_width*u<sp/>-w;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><ref refid="classray" kindref="compound">ray</ref><sp/><ref refid="classcamera_1ac07475d14a514c600c799bc7dd2c0907" kindref="member">camera::get_ray</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classray" kindref="compound">ray</ref>(origin,lower_left<sp/>+<sp/>s*width<sp/>+<sp/>d*height<sp/>-<sp/>origin);}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/mnt/c/Users/Sunil/Documents/architectural_raytracer/src/camera.cpp"/>
  </compounddef>
</doxygen>
