<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="material_8cpp" kind="file" language="C++">
    <compoundname>material.cpp</compoundname>
    <includes refid="ray_8h" local="yes">ray.h</includes>
    <includes refid="material_8h" local="yes">material.h</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="279">
        <label>/mnt/c/Users/Sunil/Documents/architectural_raytracer/src/material.cpp</label>
        <link refid="material_8cpp"/>
        <childnode refid="280" relation="include">
        </childnode>
        <childnode refid="282" relation="include">
        </childnode>
        <childnode refid="284" relation="include">
        </childnode>
      </node>
      <node id="283">
        <label>hitable.h</label>
        <link refid="hitable_8h_source"/>
        <childnode refid="280" relation="include">
        </childnode>
      </node>
      <node id="284">
        <label>iostream</label>
      </node>
      <node id="280">
        <label>ray.h</label>
        <link refid="ray_8h_source"/>
        <childnode refid="281" relation="include">
        </childnode>
      </node>
      <node id="282">
        <label>material.h</label>
        <link refid="material_8h_source"/>
        <childnode refid="281" relation="include">
        </childnode>
        <childnode refid="280" relation="include">
        </childnode>
        <childnode refid="283" relation="include">
        </childnode>
      </node>
      <node id="281">
        <label>glm/glm.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="material_8cpp_1a5c7956dd761a8cd516607ec0869c5146" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vec3</type>
        <definition>vec3 random_in_sphere</definition>
        <argsstring>()</argsstring>
        <name>random_in_sphere</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/Sunil/Documents/architectural_raytracer/src/material.cpp" line="5" column="1" bodyfile="/mnt/c/Users/Sunil/Documents/architectural_raytracer/src/main.cpp" bodystart="45" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="material_8cpp_1a3ebe7935145018433e2fb6311820627d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float schlick</definition>
        <argsstring>(float cosine, float ref_idx)</argsstring>
        <name>schlick</name>
        <param>
          <type>float</type>
          <declname>cosine</declname>
        </param>
        <param>
          <type>float</type>
          <declname>ref_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/Sunil/Documents/architectural_raytracer/src/material.cpp" line="8" column="1" bodyfile="/mnt/c/Users/Sunil/Documents/architectural_raytracer/src/material.cpp" bodystart="8" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="material_8cpp_1a28d86c4ac54f3b13296ef712c898f5d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool refract</definition>
        <argsstring>(const vec3 &amp;v, const vec3 &amp;n, float ni_over_nt, vec3 &amp;refracted)</argsstring>
        <name>refract</name>
        <param>
          <type>const vec3 &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const vec3 &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float</type>
          <declname>ni_over_nt</declname>
        </param>
        <param>
          <type>vec3 &amp;</type>
          <declname>refracted</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/Sunil/Documents/architectural_raytracer/src/material.cpp" line="14" column="1" bodyfile="/mnt/c/Users/Sunil/Documents/architectural_raytracer/src/material.cpp" bodystart="14" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="material_8cpp_1a25997d9bc8a3a0187abd63f590efe4dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vec3</type>
        <definition>vec3 reflect</definition>
        <argsstring>(const vec3 &amp;v, const vec3 &amp;n)</argsstring>
        <name>reflect</name>
        <param>
          <type>const vec3 &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const vec3 &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/Sunil/Documents/architectural_raytracer/src/material.cpp" line="33" column="1" bodyfile="/mnt/c/Users/Sunil/Documents/architectural_raytracer/src/material.cpp" bodystart="33" bodyend="35"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ray.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;material.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">vec3<sp/>random_in_sphere();</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>schlick(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>cosine,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ref_idx)<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r0<sp/>=<sp/>(1-ref_idx)<sp/>/<sp/>(1+ref_idx);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>r0<sp/>=<sp/>r0*r0;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r0<sp/>+<sp/>(1-r0)*pow((1<sp/>-<sp/>cosine),5);</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>refract(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vec3&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vec3&amp;<sp/>n,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ni_over_nt,<sp/>vec3&amp;<sp/>refracted)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>vec3<sp/>uv<sp/>=<sp/>normalize(v);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dt<sp/>=<sp/>dot(uv,<sp/>n);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>discriminant<sp/>=<sp/>1.0<sp/>-<sp/>ni_over_nt*ni_over_nt*(1-dt*dt);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(discriminant<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refracted<sp/>=<sp/>ni_over_nt*(uv<sp/>-<sp/>n*dt)<sp/>-<sp/>n*sqrt(discriminant);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdiffuse_1a4876bba63de5563e0c4b6460224e4bb1" kindref="member">diffuse::scatter</ref>(<ref refid="classray" kindref="compound">ray</ref>&amp;<sp/>r_in,<ref refid="structhit__record" kindref="compound">hit_record</ref>&amp;<sp/>rec,<sp/>vec3&amp;<sp/>attenuation,<ref refid="classray" kindref="compound">ray</ref>&amp;<sp/>scattered)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)r_in;<sp/></highlight><highlight class="comment">//<sp/>mark<sp/>param<sp/>as<sp/>deliberately<sp/>unused<sp/>(https://stackoverflow.com/a/1486931)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>scattered<sp/>=<sp/><ref refid="classray" kindref="compound">ray</ref>(rec.p,rec.normal+random_in_sphere());</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>attenuation<sp/>=<sp/>albedo;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">vec3<sp/>reflect(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vec3&amp;<sp/>v,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vec3&amp;<sp/>n){</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(v-<sp/>2*dot(v,n)*n);</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmetal_1a10a5e6a8335687f98b58ea59cac5b694" kindref="member">metal::scatter</ref>(<sp/><ref refid="classray" kindref="compound">ray</ref>&amp;<sp/>r_in,<sp/><ref refid="structhit__record" kindref="compound">hit_record</ref>&amp;<sp/>rec,<sp/>vec3&amp;<sp/>attenuation,<ref refid="classray" kindref="compound">ray</ref>&amp;<sp/>scattered)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>vec3<sp/>reflected<sp/>=<sp/>reflect(r_in.dir(),rec.normal);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>scattered<sp/>=<sp/><ref refid="classray" kindref="compound">ray</ref>(rec.p,reflected<sp/>+<sp/>fuzz<sp/>*<sp/>random_in_sphere());</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>attenuation<sp/>=<sp/>albedo;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdielectric_1abfac7c2499f64b0a5589bb3980c4e59f" kindref="member">dielectric::scatter</ref>(<ref refid="classray" kindref="compound">ray</ref>&amp;<sp/>r_in,<ref refid="structhit__record" kindref="compound">hit_record</ref>&amp;<sp/>rec,<sp/>vec3&amp;<sp/>attenuation,<sp/><ref refid="classray" kindref="compound">ray</ref>&amp;<sp/>scattered)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>vec3<sp/>outward_normal;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>vec3<sp/>reflected<sp/>=<sp/>reflect(r_in.dir(),<sp/>rec.normal);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ni_over_nt;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>attenuation<sp/>=<sp/>vec3(1.0,<sp/>1.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>vec3<sp/>refracted;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>reflect_prob;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>cosine;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dot(r_in.dir(),<sp/>rec.normal)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outward_normal<sp/>=<sp/>-rec.normal;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ni_over_nt<sp/>=<sp/>ref_idx;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cosine<sp/>=<sp/>ref_idx<sp/>*<sp/>dot(r_in.dir(),<sp/>rec.normal)<sp/>/<sp/>r_in.dir().length();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outward_normal<sp/>=<sp/>rec.normal;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ni_over_nt<sp/>=<sp/>1.0<sp/>/<sp/>ref_idx;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cosine<sp/>=<sp/>-dot(r_in.dir(),<sp/>rec.normal)<sp/>/<sp/>r_in.dir().length();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(refract(r_in.dir(),<sp/>outward_normal,<sp/>ni_over_nt,<sp/>refracted)){</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reflect_prob<sp/>=<sp/>schlick(cosine,<sp/>ref_idx);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reflect_prob<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(drand48()<sp/>&lt;<sp/>reflect_prob){</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scattered<sp/>=<sp/><ref refid="classray" kindref="compound">ray</ref>(rec.p,<sp/>reflected);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scattered<sp/>=<sp/><ref refid="classray" kindref="compound">ray</ref>(rec.p,<sp/>refracted);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/mnt/c/Users/Sunil/Documents/architectural_raytracer/src/material.cpp"/>
  </compounddef>
</doxygen>
